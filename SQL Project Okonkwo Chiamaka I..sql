---DATA RETRIEVAL AND ANALYSIS

--1. Total number of films in each category
SELECT * FROM film_category;  --To see all columns in the table
SELECT * FROM category;		 --To see all columns in the table

SELECT 
	COUNT(fc.film_id) AS total_films, --Counts the film_id's that have recurring category "name"
									   -- and renames it as "total_films"
	c.name AS category_name		 --Selects the "name" from the category table and 
								 --renames it as "category_name"    
FROM 
	film_category fc	--Refers to the film_category table with a shorthand alias 'fc'
JOIN
	category c		--Combines film_category with category tables using their common key 
					--"category_id"
ON
	fc.category_id = c.category_id
GROUP BY
	c.name	--Groups results by the category "name" so the count applies to each category
ORDER BY
	total_films DESC; --sorts the total_films in descending order

	
--2. Top 5 customers who have rented the most films.

SELECT * FROM customer;		--To see all columns in the table
SELECT * FROM rental;		--To see all columns in the table

SELECT
	CONCAT(c.first_name,' ',c.last_name) AS customer_name, --combines the names and 
															--renames it as customer name
	COUNT(r.rental_id) AS total_rentals, --Counts the no. of rentals for each customer and
										  --renames it as total_rentals
	c.customer_id		--includes customer_id for more details
FROM 
	customer c  --Refers to the 'customer' table with a shorthand alias 'c'
LEFT JOIN 
	rental r	--Combines 'customer' with 'rental' tables using their common key "customer_id"
ON 
	c.customer_id = r.customer_id
GROUP BY
	c.customer_id,	--Groups results by customer id and name to ensure correct counting
	customer_name		
ORDER BY
	total_rentals DESC  --sorts the total no. of rentals from highest to lowest
LIMIT 5;  	-- Restricts the result to the top 5 customers.


--3. Number of rentals per month for the past year	

SELECT * FROM rental;		--To see all columns in the table

SELECT 
	COUNT(rental_id) AS total_rentals,  --count the number of rentals and rename as total_rentals
	TO_CHAR(rental_date, 'YYYY-MM') AS rental_month	--extract the year and month from the 
														--timestamp and rename
FROM 
	rental 
WHERE 
    rental_date BETWEEN '2005-01-01' AND '2006-02-01'  --set date period from 2005 to 2006
GROUP BY
	TO_CHAR(rental_date, 'YYYY-MM')  -- Group by the year and month to get the total_rentals 
									  --count per month
ORDER BY 
	total_rentals DESC;   --sort total rentals per month in descending order


--4. Total revenue generated by each store

SELECT * FROM payment;		--To see all columns in the table
SELECT * FROM store;		--To see all columns in the table
SELECT * FROM customer;		--To see all columns in the table

--(Hint: The tables, 'store' and 'payment' from which the required columns: "store_id"
--and "amount" fall within, have no column in common. Introduce a third table 'customer'
--that contains a column which falls within each of the other two tables: "store_id"
--and "customer_id" respectively)

SELECT 
	s.store_id,		--Selects the unique identifier for each store
	SUM(p.amount) AS total_revenue	  --sums the payments received and renames as "total_revenue".
FROM 
	store s		--refers to the "store" table, alias "s"
JOIN 
	customer c USING (store_id) --joins 'store' and 'customer' tables using the "store_id"
JOIN
	payment p USING (customer_id)  --joins 'customer' and 'payment' tables using the "customer_id"
GROUP BY
	s.store_id		--groups results by the 'store_id' so the sum is calculated per store
ORDER BY
	total_revenue;	--sorts the results by "total_revenue" in ascending order


---DATA MANIPULATION AND TRANSFORMATION 

--1. Calculate the average rental duration for each film

SELECT * FROM film;

SELECT 
	film_id,  --selects the unique identifier for each film
	title,		--selects the film title
	ROUND(AVG(rental_duration), 2) AS average_rental --calculates the average rental_duration 
													  --and rounds it to 2 decimal places.
FROM 
	film 
GROUP BY
	film_id,  --groups results by film id and title so the average is calculated per film
	title
ORDER BY
	average_rental; --orders films by their average rental_duration in ascending order


--2. Identify films that have not been rented in the last 90 days
--i.e. which films have 'null' rental_id in the last 90 days?

SELECT * FROM rental;
SELECT * FROM film;
SELECT * FROM inventory; --rental and inventory tables have inventory_id in common
						 --film and inventory tables have film_id in common
SELECT
	f.film_id,
	f.title,
	r.rental_id,
	r.rental_date
FROM
	film f
JOIN 
    inventory i 
ON f.film_id = i.film_id		--joins film and inventory tables using the "film_id"
LEFT JOIN
	rental r 
ON i.inventory_id = r.inventory_id 	--joins inventory and rental tables using "inventory_id"
	AND r.rental_date >= NOW() - INTERVAL '90 days'
--a LEFT JOIN is used to include all inventory, but filters rentals to the last 90 days
WHERE 
    r.rental_id IS NULL	
GROUP BY
	f.film_id,
	r.rental_id
ORDER BY
	r.rental_date DESC;

--3. Update the rental table to mark rentals that are overdue 
--(return_date is null and rental_duration exceeded)

ALTER TABLE 			 	--to alter 'rental' table
	rental 
ADD COLUMN 
	status VARCHAR(20);  	--"status" column added to 'rental' table
							--variable characters constraint set to 20 characters 
	
SELECT * FROM rental;		--To see all columns in the table

UPDATE 
    rental 			 		--to update the 'rental' table
SET 
    status = 'overdue'   	-- Sets the "status" column to 'overdue'.
WHERE 
	return_date IS NULL;	--condition set is 'NULL' return_date

--4. Analyze the rental patterns to identify popular films, categories, 
----and rental trends.

--Popular films

SELECT * FROM film;							--To see all columns in the table
SELECT * FROM inventory;					--To see all columns in the table
SELECT * FROM rental;						--To see all columns in the table

SELECT 
	f.film_id,
	f.title,
	COUNT(r.rental_id) AS total_rentals   --count the rental_id's that have recurring film_id and title
										   --rename as total_rentals
FROM
	film f
LEFT JOIN
	inventory i			
ON
	f.film_id = i.film_id		--joins film and inventory tables using "film_id"
LEFT JOIN
	rental r
ON
	i.inventory_id = r.inventory_id   --joins inventory and rental tables using "inventory_id"
GROUP BY
	f.film_id,							--group by the recurring values (film_id and title)
	f.title	
ORDER BY total_rentals DESC			    --sort total_rentals in descending oeder 
										--to get the most popular films
LIMIT 50;								--limit the rows to 50


--Popular film category

SELECT * FROM category;					--To see all columns in the table	
SELECT * FROM film_category;			--To see all columns in the table
SELECT * FROM film;						--To see all columns in the table
SELECT * FROM inventory;				--To see all columns in the table
SELECT * FROM rental;					--To see all columns in the table

SELECT
	c.name AS category_name,				--select name from category table and rename as category_name
	c.category_id,							--select categery_id from category table
	COUNT(r.rental_id) AS total_rentals	--count the rental_id's that have recurring "category_id" 
										    --rename as total_rentals
FROM category c
JOIN film_category fc 						--join category and film_category tables using "category_id"
ON c.category_id = fc.category_id
JOIN film f 								--join film_category and film tables using "film_id"
ON fc.film_id = f.film_id
JOIN inventory i 							--join film and inventory tables using "film_id"
ON f.film_id = i.film_id
JOIN rental r 								--join inventory and rental tables using "film_id"
ON i.inventory_id = r.inventory_id
GROUP BY c.category_id						--group by the recurring values (category-id)
ORDER BY total_rentals DESC;				--sort total_rentals in descending oeder 
										    --to get the most popular films






